*   What are the differences between Unit Testing, Functional Testing and Integration Testing.

>>  (1) Unit Testing:

        - Testing individual units/pieces of code in isolation, typically one method or function at a time.

        Example:

            - Suppose a class has a saveUser() method.

            - In Unit Testing, you check if that method functions properly.

    (2) Functional Testing:

        - Testing the functionality of a system from the user's point of view, ensuring that the functionality behaves 
          according to the requirements.

        Example:

            - Suppose there's a login functionality which performs multiple operation behind.

            - In Functional Testing, you would check if login functionality works properly or not.
    
    (3) Integration Testing:

        - Testing multiple components, modules, or systems together after they are integrated, to 
          ensure they interact and function correctly as a group.
        
        Example:

            - Suppose there's a module A for User Registration and module B for Email Notification Service.

            - In Integration Testing, you check after a user registers, an email is actually sent.

________________________________________________________________________________________________________________________

*   What is Test-Driven Development (TDD) ?

>>  TDD is a software development approach where developers write test cases first for a new feature or functionality 
    before writing the actual code. 
    
    The development process follows a short, repetitive TDD cycle also called "Red-Green-Refactor": 
    
        (1) Red: 
        
            - Write a test for the new functionality; it fails (since the feature isn't built yet).
        
        (2) Green: 
        
            - Write just enough code to make the test pass.
        
        (3) Refactor: 
        
            - Improve the code's structure and design without changing its behavior, while ensuring the test still passes.

    Key Benefits:

        - Ensures better code quality and design.

        - Helps in early bug detection.

        - Encourages smaller, modular, and loosely-coupled code units.

    Example:

        - You want to build an add(int a, int b) method.

        (1) First, write a test:

            ```
                @Test
                void testAddition() {
                    Calculator calc = new Calculator();
                    assertEquals(5, calc.add(2, 3));
                }
            ```

        (2) Run the test: 
        
            - It will fail as method not implemented yet.

        (3) Implement the minimal working code:

            ```
                int add(int a, int b) {
                    return a + b;
                }
            ```

        (4) Test passes.

        (5) Refactor if needed (e.g., improve naming, handle edge cases).

________________________________________________________________________________________________________________________

*   What is the difference between manual testing and unit testing ?

>>  Manual Testing is the process of testing software by human testers without using any automated tools or scripts where 
    testers execute test cases manually to find defects 
    
    Unit Testing involves testing individual units or components of code (like methods or functions) automatically, 
    typically using a unit testing framework (e.g., JUnit for Java).

________________________________________________________________________________________________________________________

*   What is JUnit ? Why do we use it ?

>>  JUnit is a popular testing framework for Java, primarily used to perform unit testing of individual components 
    (like classes and methods) to ensure code correctness and catch bugs early during development.

    It provides annotations, assertions, and tools to write, execute, and organize test cases efficiently. 

    Why use it:

        - Automates repetitive testing tasks.

        - Supports Test-Driven Development (TDD) practices.

    Example:

        ```
            import org.junit.jupiter.api.Test;
            import static org.junit.jupiter.api.Assertions.assertEquals;

            class CalculatorTest {

                @Test
                void testAddition() {

                    Calculator calc = new Calculator();
                    assertEquals(5, calc.add(2, 3));
                }
            }
        ```

________________________________________________________________________________________________________________________

*   What are the benefits of using unit testing frameworks like JUnit ?

>>  (1) Automation:
        
        - Quickly run thousands of test cases automatically without manual intervention.

    (2) Supports Test-Driven Development (TDD):

        - Encourages writing tests first and building code around them, leading to better-designed software.

    (3) Integration with Build Tools:
        
        - Easily integrates with tools like Maven, Jenkins etc for continuous testing during builds and deployments.

    (4) Detailed Reporting:
        
        - Provides clear reports on which tests passed or failed, helping in faster debugging.

________________________________________________________________________________________________________________________

*   Explain the lifecycle of a JUnit test case.

>>  The lifecycle of a JUnit test case refers to the sequence of events that occur from the start to the end of a test 
    methodâ€™s execution. 
    
    It includes initializing the test environment, running the test, and cleaning up after the test finishes. 
    
    Lifecycle Phases (in JUnit 5):
        
        (1) Before Test Execution:

            (a) @BeforeAll: 
            
                - Runs once before all test methods in the class. Typically used for expensive setup tasks 
                  (e.g., database connections).

            (b) @BeforeEach: 
            
                - Runs before each test method. Used to set up the test environment (e.g., initializing variables).

        (2) Test Method Execution:

            - The test method itself is executed, and assertions are made to validate the expected behavior.

        (3) After Test Execution:

            (a) @AfterEach: 
            
                - Runs after each test method. Used for cleanup tasks (e.g., resetting values, closing files).

            (b) @AfterAll: 
            
                - Runs once after all test methods in the class. Typically used for global cleanup tasks 
                  (e.g., closing database connections).

        (4) Test Result:

            - The test either passes (assertions are true) or fails (assertions are false).

    Example:

        ```
            class MyTest {

                @BeforeAll
                static void setupAll() {
                    System.out.println("Running before all tests");
                }

                @BeforeEach
                void setup() {
                    System.out.println("Running before each test");
                }

                @Test
                void testMethod1() {
                    System.out.println("Executing testMethod1");
                    Assertions.assertTrue(true);
                }

                @Test
                void testMethod2() {
                    System.out.println("Executing testMethod2");
                    Assertions.assertTrue(true);
                }

                @AfterEach
                void cleanup() {
                    System.out.println("Running after each test");
                }

                @AfterAll
                static void cleanupAll() {
                    System.out.println("Running after all tests");
                }
            }
        ```
        
        Output:

            ```
                Running before all tests
                Running before each test
                Executing testMethod1
                Running after each test
                Running before each test
                Executing testMethod2
                Running after each test
                Running after all tests
            ```

________________________________________________________________________________________________________________________

*   How do you write a basic Test Case in JUnit ?

>>  Steps to write a basic JUnit Test Case:
        
        (1) Create a test class:
            
            - Annotate the class with @Test to indicate it contains test methods.

        (2) Write a test method:
            
            - Each test case should be a method annotated with @Test. Inside the method, you call the code to be 
              tested and use assertions to verify the result.

        (3) Use assertions:
            
            - Assertions compare the expected output with the actual output (e.g., assertEquals, assertTrue, etc.).

    Example:

        ```
            import org.junit.jupiter.api.Test;
            import static org.junit.jupiter.api.Assertions.assertEquals;

            class CalculatorTest {

                @Test
                void testAddition() {
                    Calculator calc = new Calculator();
                    int result = calc.add(2, 3);  // Method being tested
                    assertEquals(5, result);      // Assertion to verify result
                }
            }
        ```

________________________________________________________________________________________________________________________

*   What are the differences in JUnit 4 and JUnit 5 ?

>>  (1) Architecture:

        - JUnit 4 is monolithic i.e. everything in a single junit.jar.

        - JUnit 5 has modular architecture with three components:

            - JUnit Platform
            - JUnit Jupiter
            - JUnit Vintage (backward compatibility with JUnit 4)

    (2) Parameterized Tests:

        - Implementing parameterized tests in JUnit 4 is complex as it requires a separate class and constructor.

        - It is simple in JUnit 5 using @ParameterizedTest with sources like:

            - @ValueSource
            - @CsvSource
            - @CsvFileSource
            - @EnumSource
            - @ArgumentsSource

    (3) Dynamic Tests:

        - It is not available in JUnit 4.

        - JUnit 5 introduced @TestFactory and DynamicTest to generate tests at runtime.

    (4) Compatibility:

        - Only supports JUnit 4.

        - Supports both JUnit 5 (Jupiter) and JUnit 4 (Vintage engine) tests.

________________________________________________________________________________________________________________________

*   How to integrate Junit in Spring Application ?

>>  Steps to integrate JUnit in a Spring Application:
        
        (1) Add Dependencies: 
        
            - Include the necessary dependencies for JUnit and Spring Test in your pom.xml.

            ```
                <dependency>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter-api</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter-engine</artifactId>
                    <scope>test</scope>
                </dependency>
                
                <!-- Spring Test Context -->
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-test</artifactId>
                    <scope>test</scope>
                </dependency>
            ```

        (2) Create Test Class: 
        
            - In your test class, use annotations like @ExtendWith(SpringExtension.class) to enable Spring support in JUnit 5.

        (3) Load Spring Context: 
        
            - Use the @SpringBootTest or @ContextConfiguration annotations to load the Spring application context for 
              integration tests.

        (4) Autowired Components: 
        
            - You can @Autowired Spring beans (e.g., services, repositories) into your test class to test them.

    Example:
        
        ```
            import org.junit.jupiter.api.Test;
            import org.junit.jupiter.api.extension.ExtendWith;
            import org.springframework.beans.factory.annotation.Autowired;
            import org.springframework.boot.test.context.SpringBootTest;
            import static org.junit.jupiter.api.Assertions.assertEquals;

            @SpringBootTest
            @ExtendWith(SpringExtension.class)
            class CalculatorServiceTest {

                @Autowired
                private CalculatorService calculatorService;  // Injecting Spring bean

                @Test
                void testAddition() {
                    int result = calculatorService.add(2, 3);
                    assertEquals(5, result);
                }
            }
        ```
        
________________________________________________________________________________________________________________________

*   Why Field Injection is harder to test compare to Constructor or Setter Injection ?

>>  (1) No way to pass dependencies manually:

        - In field injection, dependencies are private and set internally by the framework (e.g., Spring).

        - You canâ€™t use a constructor or method to inject dependencies in your unit tests.

        - So, you need reflection or @InjectMocks to access and set those private fields.

    (2) Tight coupling with Spring:

        - Field-injected classes canâ€™t be instantiated outside the Spring context unless you use advanced mocking or 
          reflection tools.

        - That makes writing pure unit tests (outside Spring) harder.

    (3) Hidden dependencies:

        - Unit tests are clearer when all required dependencies are visible (via constructor).

        - With field injection, the class doesnâ€™t reveal what it depends on â€” you have to dig into private fields

________________________________________________________________________________________________________________________

*   Explain use of various SpringBootTest.WebEnvironment in detail.

>>  The @SpringBootTest provides a webEnvironment parameter that controls how the embedded web server is started during 
    the test.

    (1) WebEnvironment.MOCK (Default):

        - Loads a mock servlet environment, does not start an actual web server (like Tomcat).

        - It is useful for testing controllers and REST APIs using MockMvc.

        - Can use @AutoConfigureMockMvc to autowire MockMvc and simulate HTTP requests.

        Example:

            ```
                @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
                @AutoConfigureMockMvc
                class UserControllerMockTest {

                    @Autowired
                    private MockMvc mockMvc;

                    @Test
                    void testGetUsers() throws Exception {
                        mockMvc.perform(get("/users"))
                            .andExpect(status().isOk())
                            .andExpect(jsonPath("$.length()").value(3));
                    }
                }
            ```

    (2) WebEnvironment.RANDOM_PORT:

        - Starts an embedded web server (e.g., Tomcat) on a random available port.

        - Use this when you want to perform real HTTP calls (not mocks).

        - Use @LocalServerPort to get the actual port, and TestRestTemplate to send HTTP requests.

        Example:    

            ```
                @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
                class UserControllerRandomPortTest {

                    @LocalServerPort
                    private int port;

                    @Autowired
                    private TestRestTemplate restTemplate;

                    @Test
                    void testGetUsers() {
                        String url = "http://localhost:" + port + "/users";
                        ResponseEntity<List> response = restTemplate.getForEntity(url, List.class);
                        assertEquals(HttpStatus.OK, response.getStatusCode());
                        assertNotNull(response.getBody());
                    }
                }
            ```

    (3) WebEnvironment.DEFINED_PORT:

        - Starts the embedded server on the port defined in application.properties or default 8080.

        - Used when your test or app requires a fixed port.

        Example:

            ```
                @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
                class UserControllerDefinedPortTest {

                    @Autowired
                    private TestRestTemplate restTemplate;

                    @Test
                    void testGetUsers() {
                        String url = "http://localhost:8081/users";
                        ResponseEntity<List> response = restTemplate.getForEntity(url, List.class);
                        assertEquals(HttpStatus.OK, response.getStatusCode());
                    }
                }
            ```

    (4) WebEnvironment.NONE:

        - No web environment at all â€” no Servlet context, no web server, only Spring beans are loaded.

        - Use it only for non-controller testing such as services, repositories etc that donâ€™t need web stuff.

________________________________________________________________________________________________________________________

*   What is the use of TestRestTemplate ? 

>>  TestRestTemplate is primarily used to test REST controllers by simulating actual HTTP calls (GET, POST, etc.).

    Interact with a real Spring Boot application running on a real (random or defined) port.

    Itâ€™s a Spring-managed bean pre-configured with base URL (http://localhost:<randomPort>).

    Example:

        ```
            @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
            public class MyControllerTest {

                @Autowired
                private TestRestTemplate restTemplate;

                @Test
                public void shouldReturnGreeting() {
                    ResponseEntity<String> response = restTemplate.getForEntity("/greet", String.class);
                    Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
                    Assertions.assertEquals("Hello, World!", response.getBody());
                }
            }
        ```

________________________________________________________________________________________________________________________

*   What are the differences between TestRestTemplate and RestTemplate ?

>>  (1) Purpose:

        - TestRestTemplate is designed specifically for integration testing of Spring Boot REST controllers.
        
        - RestTemplate is a general-purpose HTTP client used in production code to make REST calls.

    (2) Auto-configuration:
        
        - TestRestTemplate is auto-configured and injected via @Autowired when using @SpringBootTest(webEnvironment = RANDOM_PORT or DEFINED_PORT).
        
        - RestTemplate is not auto-configured and must be explicitly created/configured (via @Bean or manually).

    (3) URL Handling:
            
        - TestRestTemplate can use relative URLs like /api/hello as domain and port comes pre-defined.

        - RestTemplate requires absolute URLs like http://localhost:8080/api/hello.

    (4) Replacement Status:

        - TestRestTemplate is still used in testing (though WebTestClient is preferred for reactive apps).

        - RestTemplate is deprecated for new development (Spring recommends WebClient instead).

________________________________________________________________________________________________________________________

*   What is the use of MockMvc ?

>>  MockMvc is a Spring testing utility used to test Spring MVC controllers by simulating HTTP requests to your 
    controller endpoints without starting an HTTP server (e.g. Tomcat).
    
    The @AutoConfigureMockMvc annotation in Spring Boot is used to automatically configure the MockMvc bean when 
    writing integration tests with @SpringBootTest so that you don't have to create and manage the MockMvc bean.

    Example:

        ```
            @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
            @AutoConfigureMockMvc
            class UserControllerMockTest {

                @Autowired
                private MockMvc mockMvc;

                @Test
                void testGetUsers() throws Exception {
                    mockMvc.perform(get("/users"))
                        .andExpect(status().isOk())
                        .andExpect(jsonPath("$.length()").value(3));
                }
            }
        ```

________________________________________________________________________________________________________________________

*   How do you test private methods in JUnit ?

>>  In general, private methods should not be tested directly. Instead, test them indirectly through public or protected 
    methods that use them. 

    However, if absolutely necessary, one can use Reflection.

    ```
        import java.lang.reflect.Method;

        @Test
        void testPrivateSquareMethod() throws Exception {
            Calculator calc = new Calculator();

            Method method = Calculator.class.getDeclaredMethod("square", int.class);
            method.setAccessible(true);

            int result = (int) method.invoke(calc, 4);
            assertEquals(16, result);
        }

    ```

________________________________________________________________________________________________________________________

*   How do you run multiple test classes together ?

>>  You can run multiple test classes together using the @Suite feature provided by the junit-platform-suite module.

    (1) Include the dependency:

        - Add the junit-platform-suite dependency as it doesn't come along with spring-boot-starter-test.

            ```
                <dependency>
                    <groupId>org.junit.platform</groupId>
                    <artifactId>junit-platform-suite</artifactId>
                    <scope>test</scope>
                </dependency>
            ```

    (2) Create a Suite class:

        - Create a suite class by annotated with @Suite annotation.

        - Specify the test classes that needs to be part of the suite in @SelectClasses annotation. 

            ```
                import org.junit.platform.suite.api.SelectClasses;
                import org.junit.platform.suite.api.Suite;

                @Suite
                @SelectClasses({
                    CalculatorControllerTests.class,
                    UserServiceTests.class,
                    OrderServiceTests.class
                })
                public class AllTestsSuite {
                    // No code needed. This will run all specified test classes.
                }
            ```

    (3) Run the suite class.

________________________________________________________________________________________________________________________

*   Explain the use of DynamicTest in JUnit 5.

>>

________________________________________________________________________________________________________________________

*   How is JUnit 5 architecture different from JUnit 4?

>>

________________________________________________________________________________________________________________________

*   Explain the role of the TestEngine in JUnit 5.

>>

________________________________________________________________________________________________________________________

*   How do you integrate JUnit with Maven?

>>

________________________________________________________________________________________________________________________

*   How do you run JUnit tests automatically during a Maven build?

>>

________________________________________________________________________________________________________________________

*   What is the role of the Surefire plugin in Maven related to JUnit tests?

>>

________________________________________________________________________________________________________________________

*   Can you run JUnit tests in parallel ? How ?

>>

________________________________________________________________________________________________________________________

*   What is test coverage and how do you measure it with JUnit ?

>>

________________________________________________________________________________________________________________________

*   How do you integrate JUnit tests with a CI/CD pipeline (e.g., Jenkins)?

>>

________________________________________________________________________________________________________________________

*   What are best practices for writing good JUnit tests ?

>>

________________________________________________________________________________________________________________________

*   What should you avoid when writing unit tests ?

>>

________________________________________________________________________________________________________________________

*   What is mocking, and when should you mock in unit tests ?

>>

________________________________________________________________________________________________________________________

*   What is stubbing in unit testing ?

>>

________________________________________________________________________________________________________________________

*   How would you structure a JUnit test class? (AAA Pattern: Arrange, Act, Assert)

>>

________________________________________________________________________________________________________________________

*   Why are some tests failing only sometimes (flaky tests) ? How to fix them ?

>>

________________________________________________________________________________________________________________________

*   What to do if a test case depends on system time ?

>>

________________________________________________________________________________________________________________________

*   What happens if a test method throws an unexpected exception ?

>>

________________________________________________________________________________________________________________________

*   How do you deal with database interactions in JUnit tests ?

>>

________________________________________________________________________________________________________________________

*   How do you handle multi-threading scenarios in JUnit tests ?

>>

________________________________________________________________________________________________________________________

*   How does JUnit support TDD ?

>>

________________________________________________________________________________________________________________________

*   Why is isolation important in unit testing ?

>>

________________________________________________________________________________________________________________________

*   Can we use JUnit for performance testing ? If yes, how ?

>>

________________________________________________________________________________________________________________________



